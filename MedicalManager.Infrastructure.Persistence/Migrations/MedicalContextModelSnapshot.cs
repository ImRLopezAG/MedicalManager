// <auto-generated />
using System;
using MedicalManager.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalManager.Infrastructure.Persistence.Migrations {
  [DbContext(typeof(MedicalContext))]
  partial class MedicalContextModelSnapshot : ModelSnapshot {
    protected override void BuildModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "6.0.13")
          .HasAnnotation("Relational:MaxIdentifierLength", 128);

      SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.Date", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd()
            .HasColumnType("int");

        SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

        b.Property<DateTime>("CreatedAt")
            .HasColumnType("datetime2");

        b.Property<string>("CreatedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<DateTime>("Day")
            .HasColumnType("datetime2");

        b.Property<string>("Description")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<int>("DoctorId")
            .HasColumnType("int");

        b.Property<DateTime>("Hour")
            .HasColumnType("datetime2");

        b.Property<int?>("LabResultId")
            .HasColumnType("int");

        b.Property<DateTime?>("LastModifiedAt")
            .HasColumnType("datetime2");

        b.Property<string>("LastModifiedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<int>("PatientId")
            .HasColumnType("int");

        b.Property<string>("Status")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.HasKey("Id");

        b.HasIndex("DoctorId");

        b.HasIndex("PatientId");

        b.ToTable("Dates", ( string )null);
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.Doctor", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd()
            .HasColumnType("int");

        SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

        b.Property<DateTime>("CreatedAt")
            .HasColumnType("datetime2");

        b.Property<string>("CreatedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Email")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<string>("FirstName")
            .IsRequired()
            .HasMaxLength(50)
            .HasColumnType("nvarchar(50)");

        b.Property<string>("Identification")
            .IsRequired()
            .HasMaxLength(20)
            .HasColumnType("nvarchar(20)");

        b.Property<DateTime?>("LastModifiedAt")
            .HasColumnType("datetime2");

        b.Property<string>("LastModifiedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<string>("LastName")
            .IsRequired()
            .HasMaxLength(50)
            .HasColumnType("nvarchar(50)");

        b.Property<string>("Phone")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Photo")
            .HasColumnType("nvarchar(max)");

        b.HasKey("Id");

        b.ToTable("Doctors", ( string )null);
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.LabResult", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd()
            .HasColumnType("int");

        SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

        b.Property<DateTime>("CreatedAt")
            .HasColumnType("datetime2");

        b.Property<string>("CreatedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<int>("DateId")
            .HasColumnType("int");

        b.Property<int>("LabTestId")
            .HasColumnType("int");

        b.Property<DateTime?>("LastModifiedAt")
            .HasColumnType("datetime2");

        b.Property<string>("LastModifiedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<int?>("PatientId")
            .HasColumnType("int");

        b.Property<string>("Result")
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Status")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.HasKey("Id");

        b.HasIndex("DateId");

        b.HasIndex("LabTestId");

        b.HasIndex("PatientId");

        b.ToTable("LabResults", ( string )null);
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.LabTest", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd()
            .HasColumnType("int");

        SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

        b.Property<DateTime>("CreatedAt")
            .HasColumnType("datetime2");

        b.Property<string>("CreatedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<int?>("DateId")
            .HasColumnType("int");

        b.Property<int?>("DoctorId")
            .HasColumnType("int");

        b.Property<DateTime?>("LastModifiedAt")
            .HasColumnType("datetime2");

        b.Property<string>("LastModifiedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Name")
            .IsRequired()
            .HasMaxLength(50)
            .HasColumnType("nvarchar(50)");

        b.Property<int?>("PatientId")
            .HasColumnType("int");

        b.HasKey("Id");

        b.HasIndex("DateId");

        b.HasIndex("DoctorId");

        b.HasIndex("PatientId");

        b.ToTable("LabTests", ( string )null);
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.Patient", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd()
            .HasColumnType("int");

        SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

        b.Property<string>("Address")
            .IsRequired()
            .HasMaxLength(50)
            .HasColumnType("nvarchar(50)");

        b.Property<bool>("Allergic")
            .HasColumnType("bit");

        b.Property<DateTime>("BirthDate")
            .HasColumnType("datetime2");

        b.Property<DateTime>("CreatedAt")
            .HasColumnType("datetime2");

        b.Property<string>("CreatedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Email")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<string>("FirstName")
            .IsRequired()
            .HasMaxLength(50)
            .HasColumnType("nvarchar(50)");

        b.Property<string>("Identification")
            .IsRequired()
            .HasMaxLength(20)
            .HasColumnType("nvarchar(20)");

        b.Property<DateTime?>("LastModifiedAt")
            .HasColumnType("datetime2");

        b.Property<string>("LastModifiedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<string>("LastName")
            .IsRequired()
            .HasMaxLength(50)
            .HasColumnType("nvarchar(50)");

        b.Property<string>("Phone")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Photo")
            .HasColumnType("nvarchar(max)");

        b.Property<bool>("Smoker")
            .HasColumnType("bit");

        b.HasKey("Id");

        b.ToTable("Patients", ( string )null);
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.User", b => {
        b.Property<int>("Id")
            .ValueGeneratedOnAdd()
            .HasColumnType("int");

        SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

        b.Property<DateTime>("CreatedAt")
            .HasColumnType("datetime2");

        b.Property<string>("CreatedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Email")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<string>("FirstName")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<DateTime?>("LastModifiedAt")
            .HasColumnType("datetime2");

        b.Property<string>("LastModifiedBy")
            .HasColumnType("nvarchar(max)");

        b.Property<string>("LastName")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Password")
            .IsRequired()
            .HasColumnType("nvarchar(max)");

        b.Property<string>("Role")
            .IsRequired()
            .HasMaxLength(15)
            .HasColumnType("nvarchar(15)");

        b.Property<string>("UserName")
            .IsRequired()
            .HasMaxLength(50)
            .HasColumnType("nvarchar(50)");

        b.HasKey("Id");

        b.ToTable("Users", ( string )null);
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.Date", b => {
        b.HasOne("MedicalManager.Core.Domain.Entities.Doctor", "Doctor")
            .WithMany("Dates")
            .HasForeignKey("DoctorId")
            .OnDelete(DeleteBehavior.Cascade)
            .IsRequired();

        b.HasOne("MedicalManager.Core.Domain.Entities.Patient", "Patient")
            .WithMany("Dates")
            .HasForeignKey("PatientId")
            .OnDelete(DeleteBehavior.Cascade)
            .IsRequired();

        b.Navigation("Doctor");

        b.Navigation("Patient");
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.LabResult", b => {
        b.HasOne("MedicalManager.Core.Domain.Entities.Date", "Date")
            .WithMany("LabResults")
            .HasForeignKey("DateId")
            .OnDelete(DeleteBehavior.Cascade)
            .IsRequired();

        b.HasOne("MedicalManager.Core.Domain.Entities.LabTest", "LabTest")
            .WithMany("LabResults")
            .HasForeignKey("LabTestId")
            .OnDelete(DeleteBehavior.Cascade)
            .IsRequired();

        b.HasOne("MedicalManager.Core.Domain.Entities.Patient", null)
            .WithMany("LabResults")
            .HasForeignKey("PatientId");

        b.Navigation("Date");

        b.Navigation("LabTest");
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.LabTest", b => {
        b.HasOne("MedicalManager.Core.Domain.Entities.Date", "Date")
            .WithMany("LabTests")
            .HasForeignKey("DateId");

        b.HasOne("MedicalManager.Core.Domain.Entities.Doctor", null)
            .WithMany("LabTests")
            .HasForeignKey("DoctorId");

        b.HasOne("MedicalManager.Core.Domain.Entities.Patient", null)
            .WithMany("LabTests")
            .HasForeignKey("PatientId");

        b.Navigation("Date");
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.Date", b => {
        b.Navigation("LabResults");

        b.Navigation("LabTests");
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.Doctor", b => {
        b.Navigation("Dates");

        b.Navigation("LabTests");
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.LabTest", b => {
        b.Navigation("LabResults");
      });

      modelBuilder.Entity("MedicalManager.Core.Domain.Entities.Patient", b => {
        b.Navigation("Dates");

        b.Navigation("LabResults");

        b.Navigation("LabTests");
      });
#pragma warning restore 612, 618
    }
  }
}
